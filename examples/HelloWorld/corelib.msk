mod pub Console
{
	fn native pub print(str text) void {}

	fn pub println(str text) void
	{
		Console.print(text);
		Console.print("\n");
	}
}

fn native pub allocate(u32 size) ptr void {}
fn native pub free(ptr void pointer) void {}

fn pub lenof(str text) u32
{
	var index mut u32 = 0;
	while (text[index++] != (u8)0) {}
	return index;
}

fn pub copy(arr u8 dest, arr u8 src) void
{
	var index mut u32 = 0;
	var current mut u8 = src[index];

	while (current != (u8)0)
	{
		dest[index] = current;
		index++;
		current = src[index];
	}

	dest[index] = 0;
}

fn pub equals(arr u8 lhstr, arr u8 rhstr) bool 
{
	var index mut u32 = 0;
	var current mut u8 = lhstr[index];

	while (current != (u8)0) 
	{
		if (current != rhstr[index]) 
		{
			return false;
		}
		index++;
		current = lhstr[index];
	}

	return true;
}