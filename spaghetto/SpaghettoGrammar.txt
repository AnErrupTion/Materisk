expression : KEYWORD:var IDENTIFIER EQUALS expression
           : comp-expr ((KEYWORD:AND|KEYWORD) comp-expr)*

comp-expr  : NOT comp-expr
           : arith-expr ((==|<|>|<=|>=) aright-expr)*

arith-expr : term ((PLUS|MINUS) term)*

term       : factor ((MOD|MUL|DIV|IDX) factor)*

factor     : (PLUS|MINUS) factor
           : power

power      : call ((POW) factor)*

call       : atom (LPAREN (expr (COMMA expr)*)? RPAREN)?

atom       : INT|FLOAT|STRING|IDENTIFIER
           : LPAREN expr RPAREN
           : list-expr
           : if-expr
           : for-expr
           : while-expr
           : func-def

list-expr  : LSQBRACKET (expr (COMMA expr)*)? RSQBRACKET

if-expr    : KEYWORD:if expr KEYWORD:then expr
           : (KEYWORD:elif expr KEYWORD:then expr)*
           : (KEYWORD:else expr)?

for-expr   : KEYWORD:for IDENTIFIER = expr KEYWORD:until cond KEYWORD:also|step expr KEYWORD:then expr

while-expr : KEYWORD:while expr KEYWORD:then expr

func-def   : KEYWORD:func IDENTIFIER?
             LPAREN (IDENTIFIER(COMMA IDENTIFIER)*)? RPAREN
             ARROW expr